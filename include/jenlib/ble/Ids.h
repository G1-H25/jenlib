//! @file include/jenlib/ble/Ids.h
//! @brief Strongly-typed identifiers for BLE with checksum support.
//! @copyright 2025 Jennifer Gott, released under the MIT License.
//! @author Jennifer Gott (simbachu@gmail.com)

#ifndef INCLUDE_JENLIB_BLE_IDS_H_
#define INCLUDE_JENLIB_BLE_IDS_H_

#include <cstdint>
#include "jenlib/ble/Payload.h"

namespace jenlib::ble {

//! @brief Session identifier type
//! @details Type for passing to arguments and returning from functions.
//! Should be created using some session specific identifier, like a timestamp.
//! Generated by the broker and set in the sensor from the start broadcast message.
class SessionId {
 public:
    constexpr SessionId() : value_(0) {}
    explicit constexpr SessionId(std::uint32_t value) : value_(value) {}
    constexpr std::uint32_t value() const { return value_; }
    friend constexpr bool operator==(SessionId a, SessionId b) { return a.value_ == b.value_; }
    friend constexpr bool operator!=(SessionId a, SessionId b) { return a.value_ != b.value_; }
    friend constexpr bool operator<(SessionId a, SessionId b) { return a.value_ < b.value_; }
 private:
    std::uint32_t value_; //!< Raw value.
};


//! @brief Device identifier type
//! @details Type for passing to arguments and returning from functions.
//! Should be created using some device specific identifier, like MAC address.
//! Stored in the sensor and in backend server using a registration process.
//! Paired using app QR scan when packing sensor in box.
class DeviceId {
 public:
    constexpr DeviceId() : value_(0) {}
    explicit constexpr DeviceId(std::uint32_t value) : value_(value) {}
    constexpr std::uint32_t value() const { return value_; }
    friend constexpr bool operator==(DeviceId a, DeviceId b) { return a.value_ == b.value_; }
    friend constexpr bool operator!=(DeviceId a, DeviceId b) { return a.value_ != b.value_; }
    friend constexpr bool operator<(DeviceId a, DeviceId b) { return a.value_ < b.value_; }

    //! @brief Serialize as 4-byte LE + 1-byte CRC8 over the 4 bytes (LE order)
    //! @param id The device identifier.
    //! @param out The payload buffer.
    //! @return True if the value was appended, false otherwise.
    static bool serialize(const DeviceId &id, BlePayload &out);
    //! @brief Deserialize from a payload buffer.
    //! @param buf The payload buffer.
    //! @param offset The offset in the payload buffer.
    //! @param out The device identifier written to.
    //! @return True if the value was deserialized, false otherwise.
    static bool deserialize(const BlePayload &buf, size_t &offset, DeviceId &out);

    //! @brief Deserialize using iterators over a payload buffer.
    //! @param it Current iterator position (advanced on success).
    //! @param end End iterator limit.
    //! @param out The device identifier written to.
    //! @return True if the value was deserialized, false otherwise.
    static bool deserialize(BlePayload::const_iterator &it, BlePayload::const_iterator end, DeviceId &out);

 private:
    std::uint32_t value_; //!< Raw value.
};

//! @brief Append a 32-bit value in little-endian to a payload buffer.
//! @param buf The payload buffer.
//! @param v The value to append.
//! @return True if the value was appended, false otherwise.
inline bool append_u32le(BlePayload &buf, std::uint32_t v) {
    return buf.append_u32le(v);
}

//! @brief Compute CRC-8-ATM checksum for data integrity verification.
//! @param data Pointer to data bytes.
//! @param len Number of bytes to process.
//! @return CRC-8-ATM checksum value.
//! @note Used for DeviceId integrity checking. Exposed for testing.
std::uint8_t compute_crc8(const std::uint8_t *data, size_t len);

} // namespace jenlib::ble

#endif  // INCLUDE_JENLIB_BLE_IDS_H_

