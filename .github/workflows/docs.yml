name: Build and Deploy Documentation

permissions:
  contents: write  # Required to push to documentation branch

on:
  push:
    branches:
      - main
      - develop*
  pull_request:
    branches:
      - main
      - develop*

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better documentation

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Build documentation
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs

        # Generate Doxygen documentation
        doxygen docs/Doxyfile

        # Verify HTML was generated
        if [ ! -d "docs/html" ]; then
          echo "Error: HTML documentation was not generated"
          exit 1
        fi

        # List generated files for verification
        echo "Generated documentation files:"
        ls -la docs/html/ | head -20

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/html/
        retention-days: 30

    # Only deploy on successful merge to main/develop branches
    - name: Deploy documentation to gh_docs branch
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop'))
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html
        # Publish to a dedicated docs branch with per-source subfolders
        publish_branch: gh_docs
        destination_dir: ${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}
        keep_files: false  # Clean previous deployments
        force_orphan: true  # Force push to avoid merge conflicts
      continue-on-error: true  # Don't fail the entire workflow if deployment fails

    - name: Check deployment status
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop'))
      run: |
        echo "## GitHub Pages Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If deployment failed due to permissions, please:" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to repository Settings → Actions → General" >> $GITHUB_STEP_SUMMARY
        echo "2. Under 'Workflow permissions', select 'Read and write permissions'" >> $GITHUB_STEP_SUMMARY
        echo "3. Check 'Allow GitHub Actions to create and approve pull requests'" >> $GITHUB_STEP_SUMMARY
        echo "4. Go to Settings → Pages and set Source to 'Deploy from a branch' with branch 'gh_docs' and folder '/'" >> $GITHUB_STEP_SUMMARY

    - name: Documentation build summary
      if: github.event_name == 'pull_request'
      run: |
        echo "## 📚 Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f "docs/html/index.html" ]; then
          echo "✅ **Build Status:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Artifact:** Documentation available for download" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Preview:** Download the 'documentation' artifact to preview locally" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build Status:** Failed" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Next Steps:** Check build logs for errors" >> $GITHUB_STEP_SUMMARY
        fi

  validate-docs:
    runs-on: ubuntu-latest
    needs: build-docs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/html/

    - name: Validate documentation structure
      run: |
        echo "Validating documentation structure..."

        # Check for main index file
        if [ ! -f "docs/html/index.html" ]; then
          echo "Error: Main documentation index.html is missing"
          exit 1
        else
          echo "✓ Found docs/html/index.html"
        fi

        echo "Documentation validation completed successfully!"

    - name: Check for broken links
      run: |
        echo "Checking for broken internal links..."

        # Simple check for common broken link patterns
        broken_links=$(grep -r "unable to resolve reference" docs/html/ || true)
        if [ -n "$broken_links" ]; then
          echo "Warning: Found potential broken links:"
          echo "$broken_links"
          echo ""
          echo "Consider fixing these cross-references in the documentation."
        else
          echo "✓ No obvious broken links found"
        fi

    - name: Generate documentation summary
      run: |
        echo "## Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation built successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Main index.html generated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ready for deployment" >> $GITHUB_STEP_SUMMARY
